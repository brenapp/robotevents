/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Events */
        get: operations["event_getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a Single Event */
        get: operations["event_getEvent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Teams present at a given Event */
        get: operations["event_getTeams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Skills runs performed at a given Event */
        get: operations["event_getSkills"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/awards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Awards at a given Event */
        get: operations["event_getAwards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/divisions/{div}/matches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Matches for a single Division of an Event */
        get: operations["event_getDivisionMatches"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/divisions/{div}/finalistRankings": {
        parameters: {
            query?: {
                /** @description Filter to only return Rankings which involve given Teams */
                "team[]"?: number[];
                /** @description Filter by the Rank */
                "rank[]"?: number[];
            };
            header?: never;
            path: {
                /** @description The ID of the Event */
                id: number;
                /** @description The ID of the Division */
                div: number;
            };
            cookie?: never;
        };
        /** @description Gets a List of Finalist Rankings for a single Division of an Event */
        get: operations["event_getDivisionFinalistRankings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/divisions/{div}/rankings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Rankings for a single Division of an Event */
        get: operations["event_getDivisionRankings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Teams */
        get: operations["team_getTeams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a Single Team */
        get: operations["team_getTeam"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Events that a given Team has attended */
        get: operations["team_getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{id}/matches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Matches that a given Team has played in */
        get: operations["team_getMatches"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{id}/rankings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Rankings for a given Team */
        get: operations["team_getRankings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{id}/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Skills runs that a given Team has performed */
        get: operations["team_getSkills"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{id}/awards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Awards that a given Team has received */
        get: operations["team_getAwards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/programs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a single Program by ID */
        get: operations["program_getProgram"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/programs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Programs */
        get: operations["program_getPrograms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Seasons */
        get: operations["season_getSeasons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seasons/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a single Season */
        get: operations["season_getSeason"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seasons/{id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets a List of Events for a given Season */
        get: operations["season_getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        Event: {
            /** Format: int32 */
            id: number;
            sku: string;
            name: string;
            /** Format: date-time */
            start?: string;
            /** Format: date-time */
            end?: string;
            season: components["schemas"]["IdInfo"];
            program: components["schemas"]["IdInfo"];
            location: components["schemas"]["Location"];
            locations?: components["schemas"]["Locations"][];
            divisions?: components["schemas"]["Division"][];
            level?: components["schemas"]["EventLevel"];
            ongoing?: boolean;
            awards_finalized?: boolean;
            event_type?: components["schemas"]["EventType"];
        };
        /** @enum {string} */
        EventType: "tournament" | "league" | "workshop" | "virtual";
        Program: {
            /** Format: i32 */
            id?: number;
            abbr?: string;
            name?: string;
        };
        /** @enum {string} */
        EventLevel: "World" | "National" | "Regional" | "State" | "Signature" | "Other";
        Location: {
            venue?: string;
            address_1?: string;
            address_2?: string;
            city?: string;
            region?: string;
            postcode?: string;
            country?: string;
            coordinates?: components["schemas"]["Coordinates"];
        };
        Coordinates: {
            /** Format: float */
            lat?: number;
            /** Format: float */
            lon?: number;
        };
        Locations: {
            [key: string]: components["schemas"]["Location"];
        };
        Division: {
            /** Format: int32 */
            id?: number;
            name?: string;
            /** Format: int32 */
            order?: number;
        };
        /** @enum {string} */
        Grade: "College" | "High School" | "Middle School" | "Elementary School";
        Team: {
            /** Format: int32 */
            id: number;
            number: string;
            team_name?: string;
            robot_name?: string;
            organization?: string;
            location?: components["schemas"]["Location"];
            registered?: boolean;
            program: components["schemas"]["IdInfo"];
            grade?: components["schemas"]["Grade"];
        };
        IdInfo: {
            /** Format: int32 */
            id: number;
            name: string;
            code?: string | null;
        };
        MatchObj: {
            /** Format: int32 */
            id: number;
            event: components["schemas"]["IdInfo"];
            division: components["schemas"]["IdInfo"];
            /** Format: int32 */
            round: number;
            /** Format: int32 */
            instance: number;
            /** Format: int32 */
            matchnum: number;
            /** Format: date-time */
            scheduled?: string;
            /** Format: date-time */
            started?: string;
            field?: string;
            scored: boolean;
            name: string;
            alliances: components["schemas"]["Alliance"][];
        };
        Alliance: {
            /** @enum {string} */
            color: "red" | "blue";
            /** Format: int32 */
            score: number;
            teams: components["schemas"]["AllianceTeam"][];
        };
        AllianceTeam: {
            team?: components["schemas"]["IdInfo"];
            sitting?: boolean;
        };
        Ranking: {
            /** Format: int32 */
            id?: number;
            event?: components["schemas"]["IdInfo"];
            division?: components["schemas"]["IdInfo"];
            /** Format: int32 */
            rank?: number;
            team?: components["schemas"]["IdInfo"];
            /** Format: int32 */
            wins?: number;
            /** Format: int32 */
            losses?: number;
            /** Format: int32 */
            ties?: number;
            /** Format: int32 */
            wp?: number;
            /** Format: int32 */
            ap?: number;
            /** Format: int32 */
            sp?: number;
            /** Format: int32 */
            high_score?: number;
            average_points?: number;
            /** Format: int32 */
            total_points?: number;
        };
        Skill: {
            /** Format: int32 */
            id?: number;
            event?: components["schemas"]["IdInfo"];
            team?: components["schemas"]["IdInfo"];
            type?: components["schemas"]["SkillType"];
            season?: components["schemas"]["IdInfo"];
            division?: components["schemas"]["IdInfo"];
            /** Format: int32 */
            rank?: number;
            /** Format: int32 */
            score?: number;
            /** Format: int32 */
            attempts?: number;
        };
        /** @enum {string} */
        SkillType: "driver" | "programming" | "package_delivery_time";
        Award: {
            /** Format: int32 */
            id?: number;
            event?: components["schemas"]["IdInfo"];
            /** Format: int32 */
            order?: number;
            title?: string;
            qualifications?: string[];
            /**
             * @description Some awards are given out per tournament or division
             * @enum {string|null}
             */
            designation?: "tournament" | "division" | null;
            /** @enum {string|null} */
            classification?: "champion" | "finalist" | "semifinalist" | "quarterfinalist" | null;
            teamWinners?: components["schemas"]["TeamAwardWinner"][];
            individualWinners?: string[];
        };
        TeamAwardWinner: {
            division?: components["schemas"]["IdInfo"];
            team?: components["schemas"]["IdInfo"];
        };
        Season: {
            /** Format: int32 */
            id?: number;
            name?: string;
            program?: components["schemas"]["IdInfo"];
            /** Format: date-time */
            start?: string;
            /** Format: date-time */
            end?: string;
            /** Format: int32 */
            years_start?: number;
            /** Format: int32 */
            years_end?: number;
        };
        Error: {
            /** Format: int32 */
            code?: number;
            message?: string;
        };
        PageMeta: {
            current_page?: number;
            first_page_url?: string;
            from?: number;
            last_page?: number;
            last_page_url?: string;
            next_page_url?: string;
            path?: string;
            per_page?: number;
            prev_page_url?: string;
            to?: number;
            total?: number;
        };
        PaginatedTeam: {
            meta?: components["schemas"]["PageMeta"];
            data?: components["schemas"]["Team"][];
        };
        PaginatedEvent: {
            meta?: components["schemas"]["PageMeta"];
            data?: components["schemas"]["Event"][];
        };
        PaginatedAward: {
            meta?: components["schemas"]["PageMeta"];
            data?: components["schemas"]["Award"][];
        };
        PaginatedSeason: {
            meta?: components["schemas"]["PageMeta"];
            data?: components["schemas"]["Season"][];
        };
        PaginatedRanking: {
            meta?: components["schemas"]["PageMeta"];
            data?: components["schemas"]["Ranking"][];
        };
        PaginatedMatch: {
            meta?: components["schemas"]["PageMeta"];
            data?: components["schemas"]["MatchObj"][];
        };
        PaginatedSkill: {
            meta?: components["schemas"]["PageMeta"];
            data?: components["schemas"]["Skill"][];
        };
        PaginatedProgram: {
            meta?: components["schemas"]["PageMeta"];
            data?: components["schemas"]["Program"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    event_getEvents: {
        parameters: {
            query?: {
                /** @description Filter by Event ID */
                "id[]"?: number[];
                /** @description Filter by Event SKU */
                "sku[]"?: string[];
                /** @description Filter by Teams that participated in the Event */
                "team[]"?: number[];
                /** @description Filter by the Season that the Event belonged to */
                "season[]"?: number[];
                /** @description Filter by the Start Date of the Event */
                start?: string;
                /** @description Filter by the End Date of the Event */
                end?: string;
                /** @description Filter by the region of the event */
                region?: string;
                /** @description Filter by the Event Level */
                "level[]"?: ("World" | "National" | "State" | "Signature" | "Other")[];
                /** @description Only show events that have at least one registered team associated with the authenticated user. */
                myEvents?: boolean;
                /** @description Filter by the Event Type */
                "eventTypes[]"?: components["schemas"]["EventType"][];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEvent"];
                };
            };
        };
    };
    event_getEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Event */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A single Event */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Specified Event not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    event_getTeams: {
        parameters: {
            query?: {
                /** @description Filter by Team Number */
                "number[]"?: string[];
                /** @description Filter by whether the Team is Registered */
                registered?: boolean;
                /** @description Filter by the Grade of the Team */
                "grade[]"?: ("College" | "High School" | "Middle School" | "Elementary School")[];
                /** @description Filter by the Country of the Team */
                "country[]"?: string[];
                /** @description Only show teams associated with the authenticated user. */
                myTeams?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID of the Event */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Teams */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTeam"];
                };
            };
        };
    };
    event_getSkills: {
        parameters: {
            query?: {
                /** @description Filter by Team Number that performed the Skills run */
                "team[]"?: number[];
                /** @description Filter by Type of Skills run */
                "type[]"?: ("driver" | "programming")[];
            };
            header?: never;
            path: {
                /** @description The ID of the Event */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Skills */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSkill"];
                };
            };
        };
    };
    event_getAwards: {
        parameters: {
            query?: {
                /** @description Filter by Team Number that the Award was awarded to */
                "team[]"?: number[];
                /** @description Filter by the Winner of the Award (can include people's names, etc.) */
                "winner[]"?: string[];
            };
            header?: never;
            path: {
                /** @description The ID of the Event */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Awards */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAward"];
                };
            };
        };
    };
    event_getDivisionMatches: {
        parameters: {
            query?: {
                /** @description Filter to only return Matches which involved given Teams */
                "team[]"?: number[];
                /** @description Filter by the Round of the Match.
                 *     Some typical values are shown below:
                 *     - 1 - Practice
                 *     - 2 - Qualification
                 *     - 3 - Quarter-Finals
                 *     - 4 - Semi-Finals
                 *     - 5 - Finals
                 *     - 6 - Round of 16
                 *     - etc.
                 *      */
                "round[]"?: number[];
                /** @description Filter by the Instance of the Match. This is used to describe which Quarter-Final match (for example) is being played */
                "instance[]"?: number[];
                /** @description Filter by the MatchNum of the Match. This is the actual Match "number", e.g. Qualification Match, or the individual match in a Best of 3 */
                "matchnum[]"?: number[];
            };
            header?: never;
            path: {
                /** @description The ID of the Event */
                id: number;
                /** @description The ID of the Division */
                div: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Matches */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMatch"];
                };
            };
        };
    };
    event_getDivisionFinalistRankings: {
        parameters: {
            query?: {
                /** @description Filter to only return Rankings which involve given Teams */
                "team[]"?: number[];
                /** @description Filter by the Rank */
                "rank[]"?: number[];
            };
            header?: never;
            path: {
                /** @description The ID of the Event */
                id: number;
                /** @description The ID of the Division */
                div: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Rankings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRanking"];
                };
            };
        };
    };
    event_getDivisionRankings: {
        parameters: {
            query?: {
                /** @description Filter to only return Rankings which involve given Teams */
                "team[]"?: number[];
                /** @description Filter by the Rank */
                "rank[]"?: number[];
            };
            header?: never;
            path: {
                /** @description The ID of the Event */
                id: number;
                /** @description The ID of the Division */
                div: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Rankings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRanking"];
                };
            };
        };
    };
    team_getTeams: {
        parameters: {
            query?: {
                /** @description Filter by Team ID */
                "id[]"?: number[];
                /** @description Filter by Team Number */
                "number[]"?: string[];
                /** @description Filter by Events that Teams have attended */
                "event[]"?: number[];
                /** @description Filter by whether or not the Team is Registered */
                registered?: boolean;
                /** @description Filter by the Program that the Team is part of */
                "program[]"?: number[];
                /** @description Filter by the Grade of the Team */
                "grade[]"?: ("College" | "High School" | "Middle School" | "Elementary School")[];
                /** @description Filter by the Country of the Team */
                "country[]"?: string[];
                /** @description Only show teams associated with the authenticated user. */
                myTeams?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Teams */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTeam"];
                };
            };
        };
    };
    team_getTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Team */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A single Team */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            /** @description Specified Team not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    team_getEvents: {
        parameters: {
            query?: {
                /** @description Filter by Event SKU */
                "sku[]"?: string[];
                /** @description Filter by the Season that the Event belonged to */
                "season[]"?: number[];
                /** @description Filter by the Start Date of the Event */
                start?: string;
                /** @description Filter by the End Date of the Event */
                end?: string;
                /** @description Filter by the Event Level */
                "level[]"?: ("World" | "National" | "State" | "Signature" | "Other")[];
            };
            header?: never;
            path: {
                /** @description The ID of the Team */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEvent"];
                };
            };
        };
    };
    team_getMatches: {
        parameters: {
            query?: {
                /** @description Filter by the Event the Match was performed at */
                "event[]"?: number[];
                /** @description Filter by the Season during which the Match was played */
                "season[]"?: number[];
                /** @description Filter by the Round of the Match.
                 *     Some typical values are shown below:
                 *     - 1 - Practice
                 *     - 2 - Qualification
                 *     - 3 - Quarter-Finals
                 *     - 4 - Semi-Finals
                 *     - 5 - Finals
                 *     - 6 - Round of 16
                 *     - etc.
                 *      */
                "round[]"?: number[];
                /** @description Filter by the Instance of the Match. This is used to describe which Quarter-Final match (for example) is being played */
                "instance[]"?: number[];
                /** @description Filter by the MatchNum of the Match. This is the actual Match "number", e.g. Qualification Match, or the individual match in a Best of 3 */
                "matchnum[]"?: number[];
            };
            header?: never;
            path: {
                /** @description The ID of the Team */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Matches */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMatch"];
                };
            };
        };
    };
    team_getRankings: {
        parameters: {
            query?: {
                /** @description Filter by the Event in which the Ranking was achieved */
                "event[]"?: number[];
                /** @description Filter by the Rank */
                "rank[]"?: number[];
                /** @description Filter by the Season during which the Ranking was */
                "season[]"?: number[];
            };
            header?: never;
            path: {
                /** @description The ID of the Team */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Rankings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRanking"];
                };
            };
        };
    };
    team_getSkills: {
        parameters: {
            query?: {
                /** @description Filter by the Event at which the Skills run was performed */
                "event[]"?: number[];
                /** @description Filter by Type of Skills run */
                "type[]"?: ("driver" | "programming")[];
                /** @description Filter by the Season during which the Skills run was performed */
                "season[]"?: number[];
            };
            header?: never;
            path: {
                /** @description The ID of the Team */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Skills */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSkill"];
                };
            };
        };
    };
    team_getAwards: {
        parameters: {
            query?: {
                /** @description Filter by the Event at which the Award was given out */
                "event[]"?: number[];
                /** @description Filter by the Season in which the Award was given out */
                "season[]"?: number[];
            };
            header?: never;
            path: {
                /** @description The ID of the Team */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Awards */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAward"];
                };
            };
        };
    };
    program_getProgram: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The Program ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Single Program */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Program"];
                };
            };
        };
    };
    program_getPrograms: {
        parameters: {
            query?: {
                /** @description Filter by program ID */
                "id[]"?: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Programs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProgram"];
                };
            };
        };
    };
    season_getSeasons: {
        parameters: {
            query?: {
                /** @description Filter by Season ID */
                "id[]"?: number[];
                /** @description Filter by Program to which the Season belongs */
                "program[]"?: number[];
                /** @description Filter by seasons in which the specified teams were active */
                "team[]"?: number[];
                /** @description Filter by Start Date of the Season */
                start?: string;
                /** @description Filter by End Date of the Season */
                end?: string;
                /** @description Only include active Seasons */
                active?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Seasons */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSeason"];
                };
            };
        };
    };
    season_getSeason: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The Season ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A single Season */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Season"];
                };
            };
        };
    };
    season_getEvents: {
        parameters: {
            query?: {
                /** @description Filter by Event SKU */
                "sku[]"?: string[];
                /** @description Filter by Teams that participated in the Event */
                "team[]"?: number[];
                /** @description Filter by the Start Date of the Event */
                start?: string;
                /** @description Filter by the End Date of the Event */
                end?: string;
                /** @description Filter by the Event Level */
                "level[]"?: ("World" | "National" | "State" | "Signature" | "Other")[];
            };
            header?: never;
            path: {
                /** @description The Season ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEvent"];
                };
            };
        };
    };
}
